/*
Leetcode problem number:- 2221
Problem: Triangular Sum of an Array
----------------------------------
You are given an array of digits. Repeatedly replace the array with a new array 
formed by summing adjacent pairs of elements (taking sum % 10), until only one 
element remains. Return that element.

Example:
Input: [1,2,3,4,5]
Step 1: [3,5,7,9]  -> after %10 -> [3,5,7,9]
Step 2: [8,2,6]  
Step 3: [0,8]
Step 4: [8]
Output: 8

Approach:
1. While the array has more than 1 element:
   - Create a temporary array.
   - For each adjacent pair, push (nums[i] + nums[i+1]) % 10 into the temp array.
   - Replace nums with temp.
2. When only one element remains, return it.

Time Complexity: O(n^2)  
  - Each iteration reduces array size by 1, so total operations â‰ˆ n + (n-1) + ... + 1 = O(n^2).
Space Complexity: O(n)  
  - Temporary array is used in each step.
*/

class Solution {
public:
    int triangularSum(vector<int>& nums) {
        while (nums.size() > 1) {
            vector<int> temp;  
            for (int i = 0; i < nums.size() - 1; i++) {
                temp.push_back((nums[i] + nums[i+1]) % 10);
            }
            nums = temp;
        }
        return nums[0];
    }
};
